# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to s3

on:
  # Runs on pushes targeting the default branch
  workflow_dispatch:
  push:
    branches: ["main"]
    paths:
      - 'aws-s3/web/**' 

jobs:
  CI-testing:
    name: Call CI
    uses: ./.github/workflows/CI.yml
    
  terraform:
    needs: CI-testing
    name: push web on s3
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2 

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Configure AWS credentials
        run: |
          aws --version
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials

      - name: Terraform init and apply
        run: |
          cd aws-s3
          ls && pwd
          terraform init
          terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Clean cloufront cache
        run: |
          # Ejecutar Terraform y guardar el valor de cloudfront_domain_name en una variable
          cloudfront_domain_name=$(terraform output -raw cloudfront_domain_name | sed -n 's/.*\(\S\{14\}\)\.cloudfront\.net.*/\1.cloudfront.net/p' | head -n 1)
      
          # Extraer el ID de la distribución de CloudFront del nombre de dominio
          distribution_id=$(aws cloudfront list-distributions --query "DistributionList.Items[?DomainName=='${cloudfront_domain_name}'].Id" --output text)
          echo "debug distribution_id $distribution_id"
      
          # Crear la invalidación
          aws cloudfront create-invalidation --distribution-id $distribution_id --paths "/*" --profile default
